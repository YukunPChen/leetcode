def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:
        res = right = 0
        intervals.sort(key=lambda a: (a[0],-a[1]))
        
        for i,j in intervals:
            res += j > right
            right = max(right,j)
        return res
        
        
        
       
       
pretty smart solution:
1>. intervals.sort(key=lambda a: (a[0],-a[1]))
in this way, we do not have to compare the first item as all the future i[0] must >= i [0] now
2>. res += j > right
using the judgement itself to add valid account

easy and fast, but I am not sure whats the time complexity of this sort.
